<?php
/**
 * @file
 * Code for the Home Pins feature.
 */

include_once 'homepins.features.inc';

/**
 * Implements hook_form_alter().
 */
function homepins_form_alter(&$form, &$form_state, $form_id) {

  // STEP 1: Look at the $form and $form_state of a Pin node.
  // In form, see 'nid', 'title', and the fields.
  //dpm($form_id, 'form_id');
  //dpm($form, 'form');
  //dpm($form_state, 'form_state');

  // Drupal Form API
  // @see https://api.drupal.org/api/drupal/developer!topics!forms_api_reference.html/7

  // STEP 2: Edit a field's label.
  //$form['title']['#title'] = 'Name of the Pin';


  //STEP 4: $form['#node_edit_form']
  //*
  // Using hook_form_alter to do something across multiple forms.
  if (!empty($form['#node_edit_form'])) {
    // If a node form, display some markup at the top.
    $form['homepins-message'] = array(
      '#markup' => '<div id="homepins-message">Some message for all nodes</div>',
      '#weight' => -999,
    );

    // STEP 5: Custom validation handler.
    $form['#validate'][] = '_homepins_node_form_title_validate';
  }
  //*/
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function homepins_form_pin_node_form_alter(&$form, &$form_state, $form_id) {
  // STEP 3: Use hook_form_FORM_ID_alter().
  // Edit a field's label.
  $form['title']['#title'] = 'Name of the Pin';

  // STEP 6: Show the default image for a Pin node.

  //dpm($form['field_image'], 'field_image');
  // NESTED ELEMENTS & #default_value

  // Add some #prefix markup to the Upload field.
  // Show the default image if an image hasn't been uploaded yet.
  if (empty($form['field_image'][LANGUAGE_NONE][0]['#default_value']['fid'])) {
    $default_image = _homepins_pin_default_image();
    if ($default_image) {
      $var = array(
        'item' => array(
          'uri' => $default_image,
        ),
        'image_style' => 'thumbnail',
      );
      $msg = t('This is the default image for Pins without an image.');
      $form['field_image']['#suffix'] = theme_image_formatter($var) . '<span class="field-image-default-text">' . $msg  . '</span>';
    }
    else {
      $form['field_image']['#prefix']  = t('No default image specified for Pins.');
    }
  }
  //*/


  // STEP 7: ALTER SELECT OPTIONS.
  //dpm($form['field_board']);

  // Add the number of pins a board has to the select list of options.
  $boards = $form['field_board'][LANGUAGE_NONE]['#options'];

  // Count the number of pins on each board.
  // Array keyed by Board nids => #num of pins.
  $pin_counts = _homepins_board_pin_count();

  // Edit any boards from the options array.
  foreach($boards as $key => $board) {

    // Skip all keys in the board select list that aren't possibly node IDs.
    if (!is_numeric($key)) {
      continue;
    }
    // Prepare the count text for the Board.
    $board_pin_count = !empty($pin_counts[$key]) ? $pin_counts[$key] : '0';
    $pin_text = ('1' == $board_pin_count) ? 'pin' : 'pins';
    $substitutions = array('@board' => $board, '@count' => $board_pin_count, '@label' => $pin_text);

    // Edit the $boards array variable.
    $boards[$key] = t('@board (@count @label)', $substitutions);
  }

  // Set the #options of the field_board to the edited $boards array.
  $form['field_board'][LANGUAGE_NONE]['#options'] = $boards;
  //*/
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function homepins_form_board_node_form_alter(&$form, &$form_state, $form_id) {
  // STEP 8: Validating specific form elements.
  $form['title']['#element_validate'][] = 'homepins_node_title_unique_validate';
}

/**
 * Validate the uniqueness of the node title.
 */
function homepins_node_title_unique_validate($element, &$form_state, $form) {

  //dpm($element);

  // Get the submitted node title value.
  $value = $element['#value'];

  // The type of node to check on uniqueness.
  $node_bundle = FALSE;
  // If a node form called this, get the bundle
  if (!empty($form_state['node'])) {
    $node_bundle = $form_state['node']->type;
  }

  // Check the element for the node bundle.
  // *** Use a hashed name for 'homepins_node_bundle',
  //     otherwise Drupal will think it's a form field and try to evaluate it.
  elseif (!empty($element['#homepins_node_bundle'])) {
    $node_bundle = $element['#homepins_node_bundle'];
  }

  // Need for PART TWO: in re-use by custom form
  if (empty($node_bundle)) {
    drupal_set_message(t('Could not determine how to validate the name of the content'), 'warning', FALSE);
    return;
  }

  // Check the submitted title against existing nodes.
  $query = new EntityFieldQuery();
  $results = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $node_bundle)
    ->propertyCondition('title', $value)
    ->propertyCondition('status', 1)
    ->execute();

  // If has results, submit an error.
  if (!empty($results)) {
    $substitutions = array(
      // In the real world, we would look up the node bundle's name
      // and put that here. For brevity, the machine_name of the bundle is fine.
      '@type' => $node_bundle,
      '%title' => $value,
    );
    // Use form_error() instead of form_set_error() b/c we have the $element.
    form_error($element, t('A @type called %title already exists.', $substitutions));
  }
}

/**
 * Validate the node title.
 */
function _homepins_node_form_title_validate($form, &$form_state) {
  //dpm($form_state, 'form_state');

  // The node Title.
  $string = $form_state['values']['title'];

  // Check for non-ASCII chars.
  $pattern = '/[^\x20-\x7f]/';
  if (preg_match($pattern, $string)) {
    form_set_error('title', t('Only ASCII text, please.'));
  }
}

/**
 * Get the default image for a Pin node.
 */
function _homepins_pin_default_image() {
  $instance = field_info_instance('node', 'field_image', 'pin');
  if (empty($instance['settings']['default_image'])) {
    return FALSE;
  }

  $default_fid = $instance['settings']['default_image'];
  $default_img_object = file_load( $default_fid );
  return $default_img_object->uri;
}

/**
 * Return a keyed array of board nids and a count of pins on that board.
 */
function _homepins_board_pin_count() {
  return db_query("SELECT board_pins.field_board_target_id as board,
      COUNT(board_pins.entity_id) as pin_count
    FROM {field_data_field_board} board_pins
    WHERE board_pins.entity_type = 'node' AND board_pins.bundle = 'pin' AND board_pins.deleted = 0
    GROUP BY board_pins.field_board_target_id")
    ->fetchAllKeyed();
}

/**
 * Create a stub node object.
 *
 * @param string $bundle
 *   The type of node to create.
 *
 * @return object
 *   The stub node.
 */
function _homepins_stub_node($bundle) {
  global $user;

  $node = new stdClass();
  $node->type = $bundle;
  $node->uid = $user->uid;
  $node->language = LANGUAGE_NONE;
  $node->name = $user->name;

  return $node;
}
